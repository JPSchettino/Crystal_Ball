#'
#' @param object An object of class "\code{Arima}", "\code{bats}",
#' "\code{tbats}", "\code{ets}" or "\code{nnetar}".
#' @param h The number of steps to forecast ahead.
#' @param ... Other arguments.
#' @return A time series of the h-step forecasts.
#' @author Rob J Hyndman & Mitchell O'Hara-Wild
#' @seealso \code{\link{forecast.Arima}}, \code{\link{forecast.bats}},
#' \code{\link{forecast.tbats}}, \code{\link{forecast.ets}},
#' \code{\link{forecast.nnetar}}, \code{\link{residuals.Arima}},
#' \code{\link{residuals.bats}}, \code{\link{residuals.tbats}},
#' \code{\link{residuals.ets}}, \code{\link{residuals.nnetar}}.
#' @keywords ts
#' @aliases fitted.forecast_ARIMA
#' @examples
#' fit <- ets(WWWusage)
#' plot(WWWusage)
#' lines(fitted(fit), col='red')
#' lines(fitted(fit, h=2), col='green')
#' lines(fitted(fit, h=3), col='blue')
#' legend("topleft", legend=paste("h =",1:3), col=2:4, lty=1)
#'
#' @export
fitted.Arima <- function(object, h = 1, ...) {
if (h == 1) {
x <- getResponse(object)
if (!is.null(object$fitted)) {
return(object$fitted)
}
else if (is.null(x)) {
# warning("Fitted values are unavailable due to missing historical data")
return(NULL)
}
else if (is.null(object$lambda)) {
return(x - object$residuals)
}
else {
fits <- InvBoxCox(BoxCox(x, object$lambda) - object$residuals, object$lambda, NULL, object$sigma2)
return(fits)
}
}
else {
return(hfitted(object = object, h = h, FUN = "Arima", ...))
}
}
#' @export
fitted.forecast_ARIMA <- fitted.Arima
# Calls arima from stats package and adds data to the returned object
# Also allows refitting to new data
# and drift terms to be included.
#' Fit ARIMA model to univariate time series
#'
#' Largely a wrapper for the \code{\link[stats]{arima}} function in the stats
#' package. The main difference is that this function allows a drift term. It
#' is also possible to take an ARIMA model from a previous call to \code{Arima}
#' and re-apply it to the data \code{y}.
#'
#' See the \code{\link[stats]{arima}} function in the stats package.
#'
#' @aliases print.ARIMA summary.Arima as.character.Arima
#'
#' @param y a univariate time series of class \code{ts}.
#' @param order A specification of the non-seasonal part of the ARIMA model:
#' the three components (p, d, q) are the AR order, the degree of differencing,
#' and the MA order.
#' @param seasonal A specification of the seasonal part of the ARIMA model,
#' plus the period (which defaults to frequency(y)). This should be a list with
#' components order and period, but a specification of just a numeric vector of
#' length 3 will be turned into a suitable list with the specification as the
#' order.
#' @param xreg Optionally, a numerical vector or matrix of external regressors, which
#' must have the same number of rows as y. It should not be a data frame.
#' @param include.mean Should the ARIMA model include a mean term? The default
#' is \code{TRUE} for undifferenced series, \code{FALSE} for differenced ones
#' (where a mean would not affect the fit nor predictions).
#' @param include.drift Should the ARIMA model include a linear drift term?
#' (i.e., a linear regression with ARIMA errors is fitted.)  The default is
#' \code{FALSE}.
#' @param include.constant If \code{TRUE}, then \code{include.mean} is set to
#' be \code{TRUE} for undifferenced series and \code{include.drift} is set to
#' be \code{TRUE} for differenced series. Note that if there is more than one
#' difference taken, no constant is included regardless of the value of this
#' argument. This is deliberate as otherwise quadratic and higher order
#' polynomial trends would be induced.
#' @param method Fitting method: maximum likelihood or minimize conditional
#' sum-of-squares. The default (unless there are missing values) is to use
#' conditional-sum-of-squares to find starting values, then maximum likelihood.
#' @param model Output from a previous call to \code{Arima}. If model is
#' passed, this same model is fitted to \code{y} without re-estimating any
#' parameters.
#' @param x Deprecated. Included for backwards compatibility.
#' @param ... Additional arguments to be passed to \code{\link[stats]{arima}}.
#' @inheritParams forecast
#' @return See the \code{\link[stats]{arima}} function in the stats package.
#' The additional objects returned are \item{x}{The time series data}
#' \item{xreg}{The regressors used in fitting (when relevant).}
#' \item{sigma2}{The bias adjusted MLE of the innovations variance.}
#'
#' @export
#'
#' @author Rob J Hyndman
#' @seealso \code{\link{auto.arima}}, \code{\link{forecast.Arima}}.
#' @keywords ts
#' @examples
#' library(ggplot2)
#' WWWusage %>%
#'   Arima(order=c(3,1,0)) %>%
#'   forecast(h=20) %>%
#'   autoplot
#'
#' # Fit model to first few years of AirPassengers data
#' air.model <- Arima(window(AirPassengers,end=1956+11/12),order=c(0,1,1),
#'                    seasonal=list(order=c(0,1,1),period=12),lambda=0)
#' plot(forecast(air.model,h=48))
#' lines(AirPassengers)
#'
#' # Apply fitted model to later data
#' air.model2 <- Arima(window(AirPassengers,start=1957),model=air.model)
#'
#' # Forecast accuracy measures on the log scale.
#' # in-sample one-step forecasts.
#' accuracy(air.model)
#' # out-of-sample one-step forecasts.
#' accuracy(air.model2)
#' # out-of-sample multi-step forecasts
#' accuracy(forecast(air.model,h=48,lambda=NULL),
#'          log(window(AirPassengers,start=1957)))
#'
Arima <- function(y, order=c(0, 0, 0), seasonal=c(0, 0, 0), xreg=NULL, include.mean=TRUE,
include.drift=FALSE, include.constant, lambda=model$lambda, biasadj=FALSE,
method=c("CSS-ML", "ML", "CSS"), model=NULL, x=y, ...) {
# Remove outliers near ends
# j <- time(x)
# x <- na.contiguous(x)
# if(length(j) != length(x))
#    warning("Missing values encountered. Using longest contiguous portion of time series")
series <- deparse(substitute(y))
origx <- y
if (!is.null(lambda)) {
x <- BoxCox(x, lambda)
lambda <- attr(x, "lambda")
if (is.null(attr(lambda, "biasadj"))) {
attr(lambda, "biasadj") <- biasadj
}
}
if (!is.null(xreg)) {
if(!is.numeric(xreg))
stop("xreg should be a numeric matrix or a numeric vector")
xreg <- as.matrix(xreg)
if (is.null(colnames(xreg))) {
colnames(xreg) <- if (ncol(xreg) == 1) "xreg" else paste("xreg", 1:ncol(xreg), sep = "")
}
}
if (!is.list(seasonal)) {
if (frequency(x) <= 1) {
seasonal <- list(order = c(0, 0, 0), period = NA)
if(length(x) <= order[2L])
stop("Not enough data to fit the model")
} else {
seasonal <- list(order = seasonal, period = frequency(x))
if(length(x) <= order[2L] + seasonal$order[2L] * seasonal$period)
stop("Not enough data to fit the model")
}
}
if (!missing(include.constant)) {
if (include.constant) {
include.mean <- TRUE
if ((order[2] + seasonal$order[2]) == 1) {
include.drift <- TRUE
}
}
else {
include.mean <- include.drift <- FALSE
}
}
if ((order[2] + seasonal$order[2]) > 1 & include.drift) {
warning("No drift term fitted as the order of difference is 2 or more.")
include.drift <- FALSE
}
if (!is.null(model)) {
tmp <- arima2(x, model, xreg = xreg, method = method)
xreg <- tmp$xreg
tmp$fitted <- NULL
tmp$lambda <- model$lambda
}
else {
if (include.drift) {
xreg <- `colnames<-`(cbind(drift = 1:length(x), xreg),
make.unique(c("drift", if(is.null(colnames(xreg)) && !is.null(xreg)) rep("", NCOL(xreg)) else colnames(xreg))))
}
if (is.null(xreg)) {
suppressWarnings(tmp <- stats::arima(x = x, order = order, seasonal = seasonal, include.mean = include.mean, method = method, ...))
} else {
suppressWarnings(tmp <- stats::arima(x = x, order = order, seasonal = seasonal, xreg = xreg, include.mean = include.mean, method = method, ...))
}
}
# Calculate aicc & bic based on tmp$aic
npar <- length(tmp$coef[tmp$mask]) + 1
missing <- is.na(tmp$residuals)
firstnonmiss <- head(which(!missing),1)
lastnonmiss <- tail(which(!missing),1)
n <- sum(!missing[firstnonmiss:lastnonmiss])
nstar <- n - tmp$arma[6] - tmp$arma[7] * tmp$arma[5]
tmp$aicc <- tmp$aic + 2 * npar * (nstar / (nstar - npar - 1) - 1)
tmp$bic <- tmp$aic + npar * (log(nstar) - 2)
tmp$series <- series
tmp$xreg <- xreg
tmp$call <- match.call()
tmp$lambda <- lambda
tmp$x <- origx
# Adjust residual variance to be unbiased
if (is.null(model)) {
tmp$sigma2 <- sum(tmp$residuals ^ 2, na.rm = TRUE) / (nstar - npar + 1)
}
out <- structure(tmp, class = c("forecast_ARIMA", "ARIMA", "Arima"))
out$fitted <- fitted.Arima(out)
out$series <- series
return(out)
}
# Refits the model to new data x
arima2 <- function(x, model, xreg, method) {
use.drift <- is.element("drift", names(model$coef))
use.intercept <- is.element("intercept", names(model$coef))
use.xreg <- is.element("xreg", names(model$call))
sigma2 <- model$sigma2
if (use.drift) {
driftmod <- stats::glm(model$xreg[, "drift"] ~ I(time(as.ts(model$x))),family = poisson(link = "log"))
newxreg <- driftmod$coefficients[1] + driftmod$coefficients[2] * time(as.ts(x))
if (!is.null(xreg)) {
origColNames <- colnames(xreg)
xreg <- cbind(newxreg, xreg)
colnames(xreg) <- c("drift", origColNames)
} else {
xreg <- as.matrix(data.frame(drift = newxreg))
}
use.xreg <- TRUE
}
if (!is.null(model$xreg)) {
if (is.null(xreg)) {
stop("No regressors provided")
}
if (ncol(xreg) != ncol(model$xreg)) {
stop("Number of regressors does not match fitted model")
}
}
if (model$arma[5] > 1 & sum(abs(model$arma[c(3, 4, 7)])) > 0) # Seasonal model
{
if (use.xreg) {
refit <- Arima(
x, order = model$arma[c(1, 6, 2)], seasonal = list(order = model$arma[c(3, 7, 4)], period = model$arma[5]),
include.mean = use.intercept, xreg = xreg, method = method, fixed = model$coef
)
} else {
refit <- Arima(
x, order = model$arma[c(1, 6, 2)], seasonal = list(order = model$arma[c(3, 7, 4)], period = model$arma[5]),
include.mean = use.intercept, method = method, fixed = model$coef
)
}
}
else if (length(model$coef) > 0) # Nonseasonal model with some parameters
{
if (use.xreg) {
refit <- Arima(x, order = model$arma[c(1, 6, 2)], xreg = xreg, include.mean = use.intercept, method = method, fixed = model$coef)
} else {
refit <- Arima(x, order = model$arma[c(1, 6, 2)], include.mean = use.intercept, method = method, fixed = model$coef)
}
}
else { # No parameters
refit <- Arima(x, order = model$arma[c(1, 6, 2)], include.mean = FALSE, method = method)
}
refit$var.coef <- matrix(0, length(refit$coef), length(refit$coef))
if (use.xreg) { # Why is this needed?
refit$xreg <- xreg
}
refit$sigma2 <- sigma2
return(refit)
}
# Modified version of function print.Arima from stats package
#' @export
print.forecast_ARIMA <- function(x, digits=max(3, getOption("digits") - 3), se=TRUE, ...) {
base::cat("Series:", x$series, "\n")
base::cat(arima.string(x, padding = FALSE), "\n")
if (!is.null(x$lambda)) {
base::cat("Box Cox transformation: lambda=", x$lambda, "\n")
}
# base::cat("\nCall:", deparse(x$call, width.cutoff=75), "\n", sep=" ")
#    if(!is.null(x$xreg))
#    {
#        base::cat("\nRegression variables fitted:\n")
#        xreg <- as.matrix(x$xreg)
#        for(i in 1:3)
#            base::cat("  ",xreg[i,],"\n")
#        base::cat("   . . .\n")
#        for(i in 1:3)
#            base::cat("  ",xreg[nrow(xreg)-3+i,],"\n")
#    }
if (length(x$coef) > 0) {
base::cat("\nCoefficients:\n")
coef <- round(x$coef, digits = digits)
if (se && NROW(x$var.coef)) {
ses <- rep.int(0, length(coef))
ses[x$mask] <- round(sqrt(diag(x$var.coef)), digits = digits)
coef <- matrix(coef, 1L, dimnames = list(NULL, names(coef)))
coef <- rbind(coef, s.e. = ses)
}
# Change intercept to mean if no regression variables
j <- match("intercept", colnames(coef))
if (is.null(x$xreg) & !is.na(j)) {
colnames(coef)[j] <- "mean"
}
print.default(coef, print.gap = 2)
}
cm <- x$call$method
base::cat("\nsigma^2 = ", format(x$sigma2, digits = digits), sep="")
if(!is.na(x$loglik))
base::cat(":  log likelihood = ", format(round(x$loglik, 2L)), sep = "")
base::cat("\n")
if (is.null(cm) || cm != "CSS") {
if(!is.na(x$aic)) {
npar <- length(x$coef[x$mask]) + 1
missing <- is.na(x$residuals)
firstnonmiss <- head(which(!missing),1)
lastnonmiss <- tail(which(!missing),1)
n <- lastnonmiss - firstnonmiss + 1
nstar <- n - x$arma[6] - x$arma[7] * x$arma[5]
bic <- x$aic + npar * (log(nstar) - 2)
aicc <- x$aic + 2 * npar * (nstar / (nstar - npar - 1) - 1)
base::cat("AIC=", format(round(x$aic, 2L)), sep = "")
base::cat("   AICc=", format(round(aicc, 2L)), sep = "")
base::cat("   BIC=", format(round(bic, 2L)), "\n", sep = "")
}
}
invisible(x)
}
#' Return the order of an ARIMA or ARFIMA model
#'
#' Returns the order of a univariate ARIMA or ARFIMA model.
#'
#'
#' @param object An object of class \dQuote{\code{Arima}}, dQuote\code{ar} or
#' \dQuote{\code{fracdiff}}. Usually the result of a call to
#' \code{\link[stats]{arima}}, \code{\link{Arima}}, \code{\link{auto.arima}},
#' \code{\link[stats]{ar}}, \code{\link{arfima}} or
#' \code{\link[fracdiff]{fracdiff}}.
#' @return A numerical vector giving the values \eqn{p}, \eqn{d} and \eqn{q} of
#' the ARIMA or ARFIMA model. For a seasonal ARIMA model, the returned vector
#' contains the values \eqn{p}, \eqn{d}, \eqn{q}, \eqn{P}, \eqn{D}, \eqn{Q} and
#' \eqn{m}, where \eqn{m} is the period of seasonality.
#' @author Rob J Hyndman
#' @seealso \code{\link[stats]{ar}}, \code{\link{auto.arima}},
#' \code{\link{Arima}}, \code{\link[stats]{arima}}, \code{\link{arfima}}.
#' @keywords ts
#' @examples
#' WWWusage %>% auto.arima %>% arimaorder
#'
#' @export
arimaorder <- function(object) {
if (is.element("Arima", class(object))) {
order <- object$arma[c(1, 6, 2, 3, 7, 4, 5)]
names(order) <- c("p", "d", "q", "P", "D", "Q", "Frequency")
seasonal <- (order[7] > 1 & sum(order[4:6]) > 0)
if (seasonal) {
return(order)
} else {
return(order[1:3])
}
}
else if (is.element("ar", class(object))) {
return(c("p" = object$order, "d" = 0, "q" = 0))
}
else if (is.element("fracdiff", class(object))) {
return(c("p" = length(object$ar), "d" = object$d, "q" = length(object$ma)))
}
else {
stop("object not of class Arima, ar or fracdiff")
}
}
#' @export
as.character.Arima <- function(x, ...) {
arima.string(x, padding = FALSE)
}
#' @rdname is.ets
#' @export
is.Arima <- function(x) {
inherits(x, "Arima")
}
#' @rdname fitted.Arima
#' @export
fitted.ar <- function(object, ...) {
getResponse(object) - residuals(object)
}
# Functions to return the response variable for different models.
# If a Box-Cox transformation is used, the series returned here should
# be on the original scale, not the Box-Cox transformed scale.
#' Get response variable from time series model.
#'
#' \code{getResponse} is a generic function for extracting the historical data
#' from a time series model (including \code{Arima}, \code{ets}, \code{ar},
#' \code{fracdiff}), a linear model of class \code{lm}, or a forecast object.
#' The function invokes particular \emph{methods} which depend on the class of
#' the first argument.
#'
#'
#' @param object a time series model or forecast object.
#' @param ... Additional arguments that are ignored.
#' @return A numerical vector or a time series object of class \code{ts}.
#' @author Rob J Hyndman
#' @keywords ts
#'
#' @export
getResponse <- function(object, ...) UseMethod("getResponse")
#' @rdname getResponse
#' @export
getResponse.default <- function(object, ...) {
if (is.list(object)) {
return(object$x)
} else {
return(NULL)
}
}
#' @rdname getResponse
#' @export
getResponse.lm <- function(object, ...) {
if(!is.null(object[["x"]])){
object[["x"]]
}
else{
responsevar <- deparse(formula(object)[[2]])
model.frame(object$model)[, responsevar]
}
}
#' @rdname getResponse
#' @export
getResponse.Arima <- function(object, ...) {
if (is.element("x", names(object))) {
x <- object$x
} else {
series.name <- object$series
if (is.null(series.name)) {
return(NULL)
} else {
x <- try(eval.parent(parse(text = series.name)), silent = TRUE)
if (is.element("try-error", class(x))) { # Try one level further up the chain
x <- try(eval.parent(parse(text = series.name), 2), silent = TRUE)
}
if (is.element("try-error", class(x))) { # Give up
return(NULL)
}
}
}
return(as.ts(x))
}
#' @rdname getResponse
#' @export
getResponse.fracdiff <- function(object, ...) {
if (is.element("x", names(object))) {
x <- object$x
} else {
series.name <- as.character(object$call)[2]
if (is.null(series.name)) {
stop("missing original time series")
} else {
x <- try(eval.parent(parse(text = series.name)), silent = TRUE)
if (is.element("try-error", class(x))) { # Try one level further up the chain
x <- try(eval.parent(parse(text = series.name), 2), silent = TRUE)
}
if (is.element("try-error", class(x))) { # Give up
return(NULL)
}
}
}
return(as.ts(x))
}
#' @rdname getResponse
#' @export
getResponse.ar <- function(object, ...) {
getResponse.Arima(object)
}
#' @rdname getResponse
#' @export
getResponse.tbats <- function(object, ...) {
if (is.element("y", names(object))) {
y <- object$y
} else {
return(NULL)
}
return(as.ts(y))
}
#' @rdname getResponse
#' @export
getResponse.bats <- function(object, ...) {
return(getResponse.tbats(object, ...))
}
#' @rdname getResponse
#' @export
getResponse.mforecast <- function(object, ...) {
return(do.call(cbind, lapply(object$forecast, function(x) x$x)))
}
#' @rdname getResponse
#' @export
getResponse.baggedModel <- function(object, ...) {
if (is.element("y", names(object))) {
y <- object$y
} else {
return(NULL)
}
return(as.ts(y))
}
vet<-rpois(120,5)
vetts<-ts(vet,frequency = 12)
Arima(vetts)
q()
